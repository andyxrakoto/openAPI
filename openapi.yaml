openapi: 3.0.3
info:
  title: Onboarding API 3.0
  description: |
    STD22044
  termsOfService: http://STD22044.com
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://STD22044.com
paths:
  /pet/findByStatus:
    get:
      summary: Finds Students by status
      description: Multiple status values can be provided with comma-separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    birthdate:
                      type: string
              example:
                - id: 1
                  name: Andy
                  birthdate: 2005-10-28T00:00:00.000Z
        '400':
          description: Invalid status value
    post:
      tags:
        - default
      summary: Create a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Invalid request
        '409':
          description: Student already exists
    put:
      summary: Update student by status
      operationId: updateStudentByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Student updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Invalid status value
    delete:
      summary: Delete student by status
      operationId: deleteStudentByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
      responses:
        '204':
          description: Student deleted successfully
        '400':
          description: Invalid status value
  /teacher:
    get:
      summary: Get list of teachers
      operationId: getTeachers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    lastname:
                      type: string
                    teach:
                      type: string
                example:
                  - id: 1
                    name: RAMAROZAKA
                    lastname: Tokimahery
                    teach: PROG1,PROG2,WEB1,DONNEES1
components:
  schemas:
    Student:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        birthdate:
          type: string
    Teacher:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
